<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IPA.Loader</name>
    </assembly>
    <members>
        <member name="T:IPA.Config.IConfigProvider">
            <summary>
            An interface for configuration providers.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Parse``1">
            <summary>
            Loads the data provided by this <see cref="T:IPA.Config.IConfigProvider"/> into an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of the object to parse into</typeparam>
            <returns>the values from the config provider parsed into the object</returns>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Store``1(``0)">
            <summary>
            Stores the data from <paramref name="obj"/> into the <see cref="T:IPA.Config.IConfigProvider"/>.
            </summary>
            <typeparam name="T">the type of <paramref name="obj"/></typeparam>
            <param name="obj">the object containing the data to save</param>
        </member>
        <member name="P:IPA.Config.IConfigProvider.Dynamic">
            <summary>
            Gets a dynamic object providing access to the configuration.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.HasChanged">
            <summary>
            Returns <see langword="true"/> if object has changed since the last save
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.Filename">
            <summary>
            Will be set with the filename (no extension) to save to. When saving, the implimentation should add the appropriate extension. Should error if set multiple times.
            </summary>
        </member>
        <member name="P:IPA.Config.IConfigProvider.LastModified">
            <summary>
            Gets the last time the config was modified.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Save">
            <summary>
            Saves configuration to file. Should error if not a root object.
            </summary>
        </member>
        <member name="M:IPA.Config.IConfigProvider.Load">
            <summary>
            Loads the state of the file on disk.
            </summary>
        </member>
        <member name="T:IPA.Config.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:IPA.Config.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="iniPath"></PARAM>
        </member>
        <member name="M:IPA.Config.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="section"></PARAM>
            Section name
            <PARAM name="key"></PARAM>
            Key Name
            <PARAM name="value"></PARAM>
            Value Name
        </member>
        <member name="M:IPA.Config.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="section"></PARAM>
            <PARAM name="key"></PARAM>
            <returns></returns>
        </member>
        <member name="T:IPA.Config.IModPrefs">
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.IModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Config.ModPrefs">
            <inheritdoc />
            <summary>
            Allows to get and set preferences for your mod. 
            </summary>
        </member>
        <member name="M:IPA.Config.ModPrefs.#ctor(IPA.IBeatSaberPlugin)">
            <summary>
            Constructs a ModPrefs object for the provide plugin.
            </summary>
            <param name="plugin">the plugin to get the preferences file for</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a string from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetInt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an int from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetFloat(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Gets a float from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.GetBool(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a bool from the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="defaultValue">Value that should be used when no value is found.</param>
            <param name="autoSave">Whether or not the default value should be written if no value is found.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.HasKey(System.String,System.String)">
            <summary>
            Checks whether or not a key exists in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetFloat(System.String,System.String,System.Single)">
            <summary>
            Sets a float in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetInt(System.String,System.String,System.Int32)">
            <summary>
            Sets an int in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="M:IPA.Config.ModPrefs.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Sets a bool in the ini.
            </summary>
            <param name="section">Section of the key.</param>
            <param name="name">Name of the key.</param>
            <param name="value">Value that should be written.</param>
        </member>
        <member name="T:IPA.Config.ModPrefsExtensions">
            <summary>
            An extension class for IBeatSaberPlugins.
            </summary>
        </member>
        <member name="M:IPA.Config.ModPrefsExtensions.GetModPrefs(IPA.IBeatSaberPlugin)">
            <summary>
            Gets the ModPrefs object for the provided plugin.
            </summary>
            <param name="plugin">the plugin wanting the prefrences</param>
            <returns>the ModPrefs object</returns>
        </member>
        <member name="T:IPA.Loader.PluginManager">
            <summary>
            The manager class for all plugins.
            </summary>
        </member>
        <member name="T:IPA.Loader.PluginManager.PluginInfo">
            <summary>
            A container object for all the data relating to a plugin.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginManager.PluginInfo.ModSaberInfo">
            <summary>
            The ModSaber updating info for the mod, or null.
            </summary>
        </member>
        <member name="P:IPA.Loader.PluginManager.BSPlugins">
            <summary>
            An <see cref="T:System.Collections.IEnumerable"/> of new Beat Saber plugins
            </summary>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPlugin(System.String)">
            <summary>
            Gets info about the plugin with the specified name.
            </summary>
            <param name="name">the name of the plugin to get (must be an exact match)</param>
            <returns>the plugin info for the requested plugin or null</returns>
        </member>
        <member name="M:IPA.Loader.PluginManager.GetPluginFromModSaberName(System.String)">
            <summary>
            Gets info about the plugin with the specified ModSaber name.
            </summary>
            <param name="name">the ModSaber name of the plugin to get (must be an exact match)</param>
            <returns>the plugin info for the requested plugin or null</returns>
        </member>
        <member name="P:IPA.Loader.PluginManager.Plugins">
            <summary>
            An <see cref="T:System.Collections.IEnumerable"/> of old IPA plugins
            </summary>
        </member>
        <member name="T:IPA.Logging.Printers.PluginSubLogPrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginSubLogPrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.#ctor(System.String,System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="mainname">the name of the main logger</param>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginSubLogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.ColoredConsolePrinter">
            <summary>
            Prints a pretty message to the console.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Filter">
            <summary>
            A filter for this specific printer.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.ColoredConsolePrinter.Color">
            <summary>
            The color to print messages as.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.ColoredConsolePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Printers.GlobalLogFilePrinter">
            <summary>
            A printer for all messages to a unified log location.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.GlobalLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="M:IPA.Logging.Printers.GlobalLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IPA.Logging.Printers.GZFilePrinter">
            <summary>
            A <see cref="T:IPA.Logging.LogPrinter"/> abstract class that provides the utilities to write to a GZip file.
            </summary>
        </member>
        <member name="F:IPA.Logging.Printers.GZFilePrinter.FileWriter">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/> that writes to the GZip file.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the file to write to without the .gz extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.StartPrint">
            <summary>
            Called at the start of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.EndPrint">
            <summary>
            Called at the end of any print session.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose">
            <summary>
            Disposes the file printer. 
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.GZFilePrinter.Dispose(System.Boolean)">
            <summary>
            Disposes the file printer.
            </summary>
            <param name="disposing">does nothing</param>
        </member>
        <member name="T:IPA.Logging.Printers.PluginLogFilePrinter">
            <summary>
            Prints log messages to the file specified by the name.
            </summary>
        </member>
        <member name="P:IPA.Logging.Printers.PluginLogFilePrinter.Filter">
            <summary>
            Provides a filter for this specific printer.
            </summary>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.GetFileInfo">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> for the target file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.#ctor(System.String)">
            <summary>
            Creates a new printer with the given name.
            </summary>
            <param name="name">the name of the logger</param>
        </member>
        <member name="M:IPA.Logging.Printers.PluginLogFilePrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints an entry to the associated file.
            </summary>
            <param name="level">the <see cref="T:IPA.Logging.Logger.Level"/> of the message</param>
            <param name="time">the <see cref="T:System.DateTime"/> the message was recorded at</param>
            <param name="logName">the name of the log that sent the message</param>
            <param name="message">the message to print</param>
        </member>
        <member name="T:IPA.Logging.Logger">
            <summary>
            The logger base class. Provides the format for console logs.
            </summary>
        </member>
        <member name="P:IPA.Logging.Logger.LogFormat">
            <summary>
            The standard format for log messages.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger.Level">
            <summary>
            An enum specifying the level of the message. Resembles Syslog.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.None">
            <summary>
            No associated level. These never get shown.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Debug">
            <summary>
            A debug message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Info">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.Level.Critical">
            <summary>
            A critical error message.
            </summary>
        </member>
        <member name="T:IPA.Logging.Logger.LogLevel">
            <summary>
            An enum providing log level filters.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.None">
            <summary>
            Allow no messages through.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.DebugOnly">
            <summary>
            Only shows Debug messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoOnly">
            <summary>
            Only shows info messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningOnly">
            <summary>
            Only shows Warning messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorOnly">
            <summary>
            Only shows Error messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.CriticalOnly">
            <summary>
            Only shows Critical messages.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.ErrorUp">
            <summary>
            Shows all messages error and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.WarningUp">
            <summary>
            Shows all messages warning and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.InfoUp">
            <summary>
            Shows all messages info and up.
            </summary>
        </member>
        <member name="F:IPA.Logging.Logger.LogLevel.All">
            <summary>
            Shows all messages.
            </summary>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            A basic log function.
            </summary>
            <param name="level">the level of the message</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)">
            <summary>
            A basic log function taking an exception to log.
            </summary>
            <param name="level">the level of the message</param>
            <param name="exeption">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.String)">
            <summary>
            Sends a debug message. 
            Equivalent to Log(Level.Debug, message);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Debug(System.Exception)">
            <summary>
            Sends an exception as a debug message.
            Equivalent to Log(Level.Debug, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.String)">
            <summary>
            Sends an info message. 
            Equivalent to Log(Level.Info, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Info(System.Exception)">
            <summary>
            Sends an exception as an info message.
            Equivalent to Log(Level.Info, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.String)">
            <summary>
            Sends a warning message. 
            Equivalent to Log(Level.Warning, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Warn(System.Exception)">
            <summary>
            Sends an exception as a warning message.
            Equivalent to Log(Level.Warning, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.String)">
            <summary>
            Sends an error message. 
            Equivalent to Log(Level.Error, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Error(System.Exception)">
            <summary>
            Sends an exception as an error message.
            Equivalent to Log(Level.Error, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.String)">
            <summary>
            Sends a critical message. 
            Equivalent to Log(Level.Critical, message).
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.String)"/>
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.Logger.Critical(System.Exception)">
            <summary>
            Sends an exception as a critical message.
            Equivalent to Log(Level.Critical, e);
            <see cref="M:IPA.Logging.Logger.Log(IPA.Logging.Logger.Level,System.Exception)"/>
            </summary>
            <param name="e">the exception to log</param>
        </member>
        <member name="T:IPA.Logging.LogPrinter">
            <summary>
            The log printer's base class.
            </summary>
        </member>
        <member name="P:IPA.Logging.LogPrinter.Filter">
            <summary>
            Provides a filter for which log levels to allow through.
            </summary>
        </member>
        <member name="M:IPA.Logging.LogPrinter.Print(IPA.Logging.Logger.Level,System.DateTime,System.String,System.String)">
            <summary>
            Prints a provided message from a given log at the specified time.
            </summary>
            <param name="level">the log level</param>
            <param name="time">the time the message was composed</param>
            <param name="logName">the name of the log that created this message</param>
            <param name="message">the message</param>
        </member>
        <member name="M:IPA.Logging.LogPrinter.StartPrint">
            <summary>
            Called before the first print in a group. May be called multiple times.
            Use this to create file handles and the like.
            </summary>
        </member>
        <member name="M:IPA.Logging.LogPrinter.EndPrint">
            <summary>
            Called after the last print in a group. May be called multiple times.
            Use this to dispose file handles and the like.
            </summary>
        </member>
        <member name="T:IPA.Logging.StandardLogger">
            <summary>
            The default <see cref="T:IPA.Logging.Logger"/> implementation.
            </summary>
        </member>
        <member name="P:IPA.Logging.StandardLogger.PrintFilter">
            <summary>
            All levels defined by this filter will be sent to loggers. All others will be ignored.
            </summary>
        </member>
        <member name="M:IPA.Logging.StandardLogger.AddPrinter(IPA.Logging.LogPrinter)">
            <summary>
            Adds a log printer to the logger.
            </summary>
            <param name="printer">the printer to add</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Log(IPA.Logging.Logger.Level,System.String)">
            <summary>
            Logs a specific message at a given level.
            </summary>
            <param name="level">the message level</param>
            <param name="message">the message to log</param>
        </member>
        <member name="M:IPA.Logging.StandardLogger.Debug(System.String)">
            <inheritdoc />
            <summary>
            An override to <see cref="M:IPA.Logging.Logger.Debug(System.String)" /> which shows the method that called it.
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="T:IPA.Logging.LoggerExtensions">
            <summary>
            A class providing extensions for various loggers.
            </summary>
        </member>
        <member name="M:IPA.Logging.LoggerExtensions.GetChildLogger(IPA.Logging.Logger,System.String)">
            <summary>
            Gets a child logger, if supported.
            </summary>
            <param name="logger">the parent <see cref="T:IPA.Logging.Logger"/></param>
            <param name="name">the name of the child</param>
            <returns>the child logger</returns>
        </member>
        <member name="T:IPA.IBeatSaberPlugin">
            <summary>
            Interface for Beat Saber plugins. Every class that implements this will be loaded if the DLL is placed at
            data/Managed/Plugins.
            </summary>
        </member>
        <member name="P:IPA.IBeatSaberPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:IPA.IBeatSaberPlugin.Version">
            <summary>
            Gets the version of the plugin.
            </summary>
        </member>
        <member name="P:IPA.IBeatSaberPlugin.ModInfo">
            <summary>
            Gets the info for the ModSaber release of this plugin. Return null if there is no ModSaber release.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnApplicationStart">
            <summary>
            Gets invoked when the application is started.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnApplicationQuit">
            <summary>
            Gets invoked when the application is closed.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnUpdate">
            <summary>
            Gets invoked on every graphic update.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnFixedUpdate">
            <summary>
            Gets invoked on ever physics update.
            </summary>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnSceneLoaded(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            Gets invoked whenever a scene is loaded.
            </summary>
            <param name="scene">The scene currently loaded</param>
            <param name="sceneMode">The type of loading</param>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Gets invoked whenever a scene is unloaded
            </summary>
            <param name="scene">The unloaded scene</param>
        </member>
        <member name="M:IPA.IBeatSaberPlugin.OnActiveSceneChanged(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
            <summary>
            Gets invoked whenever a scene is changed
            </summary>
            <param name="prevScene">The Scene that was previously loaded</param>
            <param name="nextScene">The Scene being loaded</param>
        </member>
        <member name="T:IPA.IEnhancedBeatSaberPlugin">
            <inheritdoc cref="T:IPA.IBeatSaberPlugin" />
            <summary>
            An enhanced version of a standard BeatSaber plugin.
            </summary>
        </member>
        <member name="T:IPA.ModsaberModInfo">
            <summary>
            A class to provide information about a mod on ModSaber.ML
            </summary>
        </member>
        <member name="P:IPA.ModsaberModInfo.InternalName">
            <summary>
            The name the mod uses on ModSaber as an identifier.
            </summary>
        </member>
        <member name="P:IPA.ModsaberModInfo.CurrentVersion">
            <summary>
            The version of the currently installed mod. Used to compare to the version on ModSaber. Should be a valid SemVer version.
            </summary>
        </member>
        <member name="T:IPA.IGenericEnhancedPlugin">
            <summary>
            A generic interface for the modification for enhanced plugins.
            </summary>
        </member>
        <member name="P:IPA.IGenericEnhancedPlugin.Filter">
            <summary>
            Gets a list of executables this plugin should be executed on (without the file ending)
            </summary>
            <example>{ "PlayClub", "PlayClubStudio" }</example>
        </member>
        <member name="M:IPA.IGenericEnhancedPlugin.OnLateUpdate">
            <summary>
            Called after Update.
            </summary>
        </member>
        <member name="T:IPA.Old.IEnhancedPlugin">
            <inheritdoc cref="T:IPA.Old.IPlugin" />
            <summary>
            An enhanced version of the standard IPA plugin.
            </summary>
        </member>
        <member name="T:IPA.Old.IPlugin">
            <summary>
            Interface for generic Illusion unity plugins. Every class that implements this will be loaded if the DLL is placed at
            data/Managed/Plugins.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:IPA.Old.IPlugin.Version">
            <summary>
            Gets the version of the plugin.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationStart">
            <summary>
            Gets invoked when the application is started.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnApplicationQuit">
            <summary>
            Gets invoked when the application is closed.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasLoaded(System.Int32)">
            <summary>
            Gets invoked whenever a level is loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnLevelWasInitialized(System.Int32)">
            <summary>
            Gets invoked after the first update cycle after a level was loaded.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:IPA.Old.IPlugin.OnUpdate">
            <summary>
            Gets invoked on every graphic update.
            </summary>
        </member>
        <member name="M:IPA.Old.IPlugin.OnFixedUpdate">
            <summary>
            Gets invoked on ever physics update.
            </summary>
        </member>
        <member name="T:IPA.Utilities.BeatSaber">
            <summary>
            Provides some basic utility methods and properties of Beat Saber
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.GameVersion">
            <summary>
            Provides the current game version
            </summary>
        </member>
        <member name="T:IPA.Utilities.BeatSaber.Release">
            <summary>
            The different types of releases of the game.
            </summary>
        </member>
        <member name="F:IPA.Utilities.BeatSaber.Release.Steam">
            <summary>
            Indicates a Steam release.
            </summary>
        </member>
        <member name="F:IPA.Utilities.BeatSaber.Release.Oculus">
            <summary>
            Indicates an Oculus release.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.ReleaseType">
            <summary>
            Gets the <see cref="T:IPA.Utilities.BeatSaber.Release"/> type of this installation of Beat Saber
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.InstallPath">
            <summary>
            The path to the Beat Saber install dir
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.LibraryPath">
            <summary>
            The path to the `Libs` folder. Use only if necessary.
            </summary>
        </member>
        <member name="P:IPA.Utilities.BeatSaber.NativeLibraryPath">
            <summary>
            The path to the `Libs\Native` folder. Use only if necessary.
            </summary>
        </member>
        <member name="T:IPA.Utilities.Ref`1">
            <summary>
            A class to store a reference for passing to methods which cannot take ref parameters.
            </summary>
            <typeparam name="T">the type of the value</typeparam>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Value">
            <summary>
            The value of the reference
            </summary>
        </member>
        <member name="P:IPA.Utilities.Ref`1.Error">
            <summary>
            An exception that was generated while creating the value.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Ref`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="reference">the initial value of the reference</param>
        </member>
        <member name="M:IPA.Utilities.Ref`1.Verify">
            <summary>
            Throws error if one was set.
            </summary>
        </member>
        <member name="T:IPA.Utilities.ReflectionUtil">
            <summary>
            A utility class providing reflection helper methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetPrivateField(System.Object,System.String,System.Object)">
            <summary>
            Sets a (potentially) private field on the target object.
            </summary>
            <param name="obj">the object instance</param>
            <param name="fieldName">the field to set</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.GetPrivateField``1(System.Object,System.String)">
            <summary>
            Gets the value of a (potentially) private field.
            </summary>
            <typeparam name="T">the type of te field (result casted)</typeparam>
            <param name="obj">the object instance to pull from</param>
            <param name="fieldName">the name of the field to read</param>
            <returns>the value of the field</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.SetPrivateProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a (potentially) private property on the target object.
            </summary>
            <param name="obj">the target object instance</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.InvokePrivateMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a (potentially) private method.
            </summary>
            <param name="obj">the object to call from</param>
            <param name="methodName">the method name</param>
            <param name="methodParams">the method parameters</param>
            <returns>the return value</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.InvokePrivateMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a (potentially) private method.
            </summary>
            <typeparam name="T">the return type</typeparam>
            <param name="obj">the object to call from</param>
            <param name="methodName">the method name to call</param>
            <param name="methodParams">the method's parameters</param>
            <returns>the return value</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)">
            <summary>
            Copies a component of type originalType to a component of overridingType on the destination GameObject.
            </summary>
            <param name="original">the original component</param>
            <param name="overridingType">the new component's type</param>
            <param name="destination">the destination GameObject</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CopyComponent``1(UnityEngine.Component,UnityEngine.GameObject,System.Type)">
            <summary>
            A generic version of CopyComponent. 
            <see cref="M:IPA.Utilities.ReflectionUtil.CopyComponent(UnityEngine.Component,System.Type,UnityEngine.GameObject,System.Type)"/>
            </summary>
            <typeparam name="T">the overriding type</typeparam>
            <param name="original">the original component</param>
            <param name="destination">the destination game object</param>
            <param name="originalTypeOverride">overrides the source component type (for example, to a superclass)</param>
            <returns>the copied component</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.String,System.String,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a type specified by functionClass and dependency.
            <seealso cref="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])"/>
            </summary>
            <param name="functionClass">the type name</param>
            <param name="dependency">the assembly the type is in</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature of the method</param>
            <param name="parameters">the method parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a new object.
            </summary>
            <param name="type">the object type</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature</param>
            <param name="parameters">the parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod``1(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Calls an instance method on a new object.
            <seealso cref="M:IPA.Utilities.ReflectionUtil.CallNonStaticMethod(System.Type,System.String,System.Type[],System.Object[])"/>
            </summary>
            <typeparam name="T">the return type</typeparam>
            <param name="type">the object type</param>
            <param name="function">the name of the method to call</param>
            <param name="methodSig">the type signature</param>
            <param name="parameters">the parameters</param>
            <returns>the result of the call</returns>
        </member>
        <member name="T:IPA.Utilities.Extensions">
            <summary>
            A class providing various extension methods.
            </summary>
        </member>
        <member name="M:IPA.Utilities.Extensions.GetDefault(System.Type)">
            <summary>
            Gets the default value for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">the <see cref="T:System.Type"/> to get the default value for</param>
            <returns>the default value of <paramref name="type"/></returns>
        </member>
        <member name="T:IPA.Utilities.LoneFunctions">
            <summary>
            A class providing static utility functions that in any other language would just *exist*.
            </summary>
        </member>
        <member name="M:IPA.Utilities.LoneFunctions.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to a byte array.
            </summary>
            <param name="hex">the hex stream</param>
            <returns>the corresponding byte array</returns>
        </member>
        <member name="M:IPA.Utilities.LoneFunctions.ByteArrayToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="M:IPA.Utilities.LoneFunctions.UnsafeCompare(System.Byte[],System.Byte[])">
            <summary>
            Uses unsafe code to compare 2 byte arrays quickly.
            </summary>
            <param name="a1">array 1</param>
            <param name="a2">array 2</param>
            <returns>whether or not they are byte-for-byte equal</returns>
        </member>
        <member name="M:IPA.Utilities.LoneFunctions.GetRelativePath(System.String,System.String)">
            <summary>
            Gets a path relative to the provided folder.
            </summary>
            <param name="file">the file to relativize</param>
            <param name="folder">the source folder</param>
            <returns>a path to get from <paramref name="folder"/> to <paramref name="file"/></returns>
        </member>
        <member name="M:IPA.Utilities.LoneFunctions.CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Copies all files from <paramref name="source"/> to <paramref name="target"/>.
            </summary>
            <param name="source">the source directory</param>
            <param name="target">the destination directory</param>
            <param name="appendFileName"></param>
        </member>
    </members>
</doc>
